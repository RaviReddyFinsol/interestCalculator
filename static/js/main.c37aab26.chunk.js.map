{"version":3,"sources":["components/ratioStrategy/AddUpdateRatio.js","components/ratioStrategy/RatioStrategy.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","fieldControl","width","maxWidth","buttonControl","container","height","minHeight","margin","AddUpdateRatio","details","closeDialog","addStrategy","updateStrategy","useState","teamOne","teamTwo","legs","legType","legName","legSide","ratio","amount","teamOneWin","teamTwoWin","strategy","setStrategy","useEffect","strategyDetails","onValueChangeEvent","e","target","name","value","onLegValueChangeEvent","leg","existingLegs","filter","i","newLeg","push","_","orderBy","classes","className","Dialog","open","state","onClose","DialogTitle","Grid","direction","justify","alignItems","spacing","item","xs","TextField","variant","label","size","fullWidth","onChange","map","Fragment","Divider","Typography","color","FormControl","component","FormLabel","RadioGroup","aria-label","row","FormControlLabel","control","Radio","Button","onClick","tableContainer","maxHeight","marginTop","StyledTableCell","withStyles","head","backgroundColor","palette","common","white","body","fontSize","fontWeight","TableCell","StyledTableRow","root","action","hover","TableRow","RatioStrategy","dialogDetails","setDialogDetails","strategies","setStrategies","calculateProfitLoss","newStrategy","profit","style","marginLeft","Paper","TableContainer","Table","stickyHeader","TableHead","length","TableBody","IconButton","openDialogForEdit","Edit","id","filteredStrategies","deleteStrategy","Delete","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c37aab26.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { Dialog, DialogTitle, Grid, TextField, Button, Typography, Divider, FormControl, FormLabel, FormControlLabel, Radio, RadioGroup } from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport _ from 'lodash'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    fieldControl: {\r\n        width: '80%',\r\n        maxWidth: 300\r\n    },\r\n    buttonControl: {\r\n        width: '40%',\r\n    },\r\n    container: {\r\n        width: 500,\r\n        height: 650,\r\n        minHeight: '100%',\r\n        margin: 10,\r\n    },\r\n}));\r\n\r\nfunction AddUpdateRatio({ details, closeDialog, addStrategy, updateStrategy }) {\r\n\r\n    const [strategy, setStrategy] = useState({ teamOne: '', teamTwo: '', legs: [{ legType: 'Leg 1', legName: '', legSide: '1', ratio: 0, amount: 0 }, { legType: 'Leg 2', legName: '', legSide: '2', ratio: 0, amount: 0 }, { legType: 'Leg 3', legName: '', legSide: '2', ratio: 0, amount: 0 },], teamOneWin: 0, teamTwoWin: 0 })\r\n\r\n    useEffect(() => {\r\n        if (details.strategyDetails) {\r\n            setStrategy(details.strategyDetails);\r\n        }\r\n    }, [details.strategyDetails])\r\n\r\n    const onValueChangeEvent = e => {\r\n        setStrategy({ ...strategy, [e.target.name]: e.target.value })\r\n    }\r\n\r\n    const onLegValueChangeEvent = (e, leg) => {\r\n        let existingLegs = strategy.legs.filter(i => i.legType !== leg.legType);\r\n        let newLeg = { ...leg }\r\n        newLeg[e.target.name] = e.target.value;\r\n        existingLegs.push(newLeg);\r\n        setStrategy({ ...strategy, legs: _.orderBy(existingLegs, 'legType') })\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <Dialog open={details.state} onClose={closeDialog}>\r\n                <DialogTitle>{details.strategyDetails ? 'Update' : 'Add'} Strategy</DialogTitle>\r\n                <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={2} className={classes.container}>\r\n                    <Grid item xs={6}>\r\n                        <TextField variant=\"outlined\" label=\"Team 1 name\" size=\"small\" fullWidth={true} name=\"teamOne\" value={strategy.teamOne} onChange={onValueChangeEvent} />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <TextField variant=\"outlined\" label=\"Team 2 name\" size=\"small\" fullWidth={true} name=\"teamTwo\" value={strategy.teamTwo} onChange={onValueChangeEvent} />\r\n                    </Grid>\r\n                    {\r\n                        strategy.legs.map(leg => (\r\n                            <React.Fragment key={leg.legType}>\r\n                                <Grid item xs={12}>\r\n                                    <Divider />\r\n                                    <Typography color=\"secondary\">{leg.legType}</Typography>\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <FormControl component=\"fieldset\">\r\n                                        <FormLabel component=\"legend\">My Team</FormLabel>\r\n                                        <RadioGroup aria-label=\"team\" name=\"legSide\" value={leg.legSide} row onChange={(e) => onLegValueChangeEvent(e, leg)}>\r\n                                            <FormControlLabel value=\"1\" control={<Radio />} label=\"Team1\" />\r\n                                            <FormControlLabel value=\"2\" control={<Radio />} label=\"Team2\" />\r\n                                        </RadioGroup>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <TextField variant=\"outlined\" label=\"Leg Name\" size=\"small\" fullWidth={true} name=\"legName\" value={leg.legName} onChange={(e) => onLegValueChangeEvent(e, leg)} />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <TextField variant=\"outlined\" label=\"Ratio\" size=\"small\" fullWidth={true} name=\"ratio\" value={leg.ratio} onChange={(e) => onLegValueChangeEvent(e, leg)} />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <TextField variant=\"outlined\" label=\"Invested\" size=\"small\" fullWidth={true} name=\"amount\" value={leg.amount} onChange={(e) => onLegValueChangeEvent(e, leg)} />\r\n                                </Grid>\r\n                            </React.Fragment>\r\n                        ))\r\n                    }\r\n\r\n                    <Grid item container justify=\"space-around\" alignItems=\"center\" direction=\"row\">\r\n                        <>\r\n                            {\r\n                                details.strategyDetails ? (<Button variant=\"contained\" color=\"primary\" size=\"small\" className={classes.buttonControl} onClick={() => updateStrategy(strategy)} >Update</Button>) : (\r\n                                    <Button variant=\"contained\" color=\"primary\" size=\"small\" className={classes.buttonControl} onClick={() => addStrategy(strategy)} >Save</Button>\r\n                                )\r\n                            }\r\n                            <Button variant=\"contained\" color=\"secondary\" size=\"small\" className={classes.buttonControl} onClick={closeDialog}>Cancel</Button>\r\n                        </>\r\n                    </Grid>\r\n                </Grid>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddUpdateRatio\r\n","import React, { useState } from 'react'\r\nimport { Button, Paper, TableContainer, Table, TableBody, TableRow, TableHead, TableCell, IconButton } from '@material-ui/core'\r\nimport { Edit, Delete } from '@material-ui/icons'\r\nimport AddUpdateRatio from './AddUpdateRatio'\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport _ from 'lodash'\r\n\r\nconst useStyles = makeStyles({\r\n    tableContainer: {\r\n        maxHeight: 500,\r\n        margin: 7,\r\n        width: '95%'\r\n    },\r\n    fieldControl: {\r\n        width: '80%',\r\n        maxWidth: 300,\r\n        marginTop: 10\r\n    },\r\n});\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        backgroundColor: 'dodgerBlue',\r\n        color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n        fontSize: 12,\r\n        fontWeight: \"600\"\r\n    },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: theme.palette.action.hover,\r\n        },\r\n    },\r\n}))(TableRow);\r\nfunction RatioStrategy() {\r\n\r\n    const [dialogDetails, setDialogDetails] = useState({ state: false, strategyDetails: null })\r\n    const [strategies, setStrategies] = useState([])\r\n\r\n    const openDialog = () => {\r\n        setDialogDetails({ ...dialogDetails, state: true })\r\n    }\r\n\r\n    const openDialogForEdit = (strategy) => {\r\n        setDialogDetails({ strategyDetails: { ...strategy }, state: true })\r\n    }\r\n\r\n    const closeDialog = () => {\r\n        setDialogDetails({ state: false, strategyDetails: null })\r\n    }\r\n\r\n    const addStrategy = (strategy) => {\r\n        let newStrategy = { ...strategy }\r\n        newStrategy.id = newStrategy.teamOne + newStrategy.teamTwo\r\n        calculateProfitLoss(newStrategy);\r\n        setStrategies(_.orderBy([...strategies, newStrategy], 'id'))\r\n        closeDialog();\r\n    }\r\n\r\n    const updateStrategy = (strategy) => {\r\n        let filteredStrategies = strategies.filter(i => i.id !== strategy.id);\r\n        let newStrategy = { ...strategy }\r\n        calculateProfitLoss(newStrategy);\r\n        filteredStrategies.push(newStrategy);\r\n        setStrategies(_.orderBy(filteredStrategies, 'id'))\r\n        closeDialog();\r\n    }\r\n\r\n    const deleteStrategy = (id) => {\r\n        let filteredStrategies = strategies.filter(i => i.id !== id);\r\n        setStrategies(filteredStrategies)\r\n    }\r\n\r\n    const calculateProfitLoss = newStrategy => {\r\n        newStrategy.teamOneWin = 0;\r\n        newStrategy.teamTwoWin = 0;\r\n        for (let leg of newStrategy.legs) {\r\n            const profit = leg.amount * leg.ratio;\r\n            if (leg.legSide === '1') {\r\n                newStrategy.teamOneWin += profit\r\n                newStrategy.teamTwoWin -= leg.amount\r\n            }\r\n            else {\r\n                newStrategy.teamOneWin -= leg.amount\r\n                newStrategy.teamTwoWin += profit\r\n            }\r\n        }\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <Button variant='contained' color='primary' size='small' onClick={openDialog} style={{ marginTop: '10px', marginLeft: '20px' }}>Add Team</Button>\r\n                <Paper >\r\n                    <TableContainer component={Paper} className={classes.tableContainer}>\r\n                        <Table stickyHeader size=\"small\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <StyledTableCell>Teams</StyledTableCell>\r\n                                    <StyledTableCell>Team 1 Profit</StyledTableCell>\r\n                                    <StyledTableCell>Team 2 Profit</StyledTableCell>\r\n                                    {\r\n                                        strategies.length > 0 && strategies[0].legs.map(leg => (\r\n                                            <React.Fragment key={leg.legType}>\r\n                                                <StyledTableCell>\r\n                                                    {leg.legType}\r\n                                                </StyledTableCell>\r\n                                            </React.Fragment>\r\n                                        ))\r\n                                    }\r\n                                    <StyledTableCell>Actions</StyledTableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {strategies.map((strategy) => (\r\n                                    <StyledTableRow key={strategy.id}>\r\n                                        <StyledTableCell>\r\n                                            {strategy.teamOne} vs {strategy.teamTwo}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell style={strategy.teamOneWin < 0 ? { color: 'red' } : { color: 'blue' }}>\r\n                                            {strategy.teamOneWin}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell style={strategy.teamTwoWin < 0 ? { color: 'red' } : { color: 'blue' }}>\r\n                                            {strategy.teamTwoWin}\r\n                                        </StyledTableCell>\r\n                                        {\r\n                                            strategy.legs.map(leg => (\r\n                                                <React.Fragment key={leg.legType}>\r\n                                                    <StyledTableCell>\r\n                                                        {leg.legSide === '1' ? strategy.teamOne : strategy.teamTwo} / {leg.ratio} / {leg.amount} / {leg.legName}\r\n                                                    </StyledTableCell>\r\n                                                </React.Fragment>\r\n                                            ))\r\n                                        }\r\n                                        <StyledTableCell>\r\n                                            <IconButton size=\"small\" onClick={() => openDialogForEdit(strategy)}>\r\n                                                <Edit size=\"small\" color=\"primary\" />\r\n                                            </IconButton>\r\n                                            <IconButton size=\"small\" onClick={() => deleteStrategy(strategy.id)}>\r\n                                                <Delete size=\"small\" color=\"secondary\" />\r\n                                            </IconButton>\r\n                                        </StyledTableCell>\r\n\r\n                                    </StyledTableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Paper>\r\n            </div>\r\n            {\r\n                dialogDetails.state && (\r\n                    <AddUpdateRatio details={dialogDetails} closeDialog={closeDialog} addStrategy={addStrategy} updateStrategy={updateStrategy} />\r\n                )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RatioStrategy\r\n","import InterestCalculator from './components/calculator/InterestCalculator'\nimport RatioStrategy from './components/ratioStrategy/RatioStrategy'\n\nfunction App() {\n  return (\n    // <InterestCalculator />\n    <RatioStrategy />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}