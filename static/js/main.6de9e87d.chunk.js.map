{"version":3,"sources":["components/calculator/InterestCalculator.js","components/ratioStrategy/AddUpdateRatio.js","components/ratioStrategy/RatioStrategy.js","routes/Router.js","App.js","reportWebVitals.js","index.js"],"names":["InterestCalculator","useState","interestType","amount","interestRate","fromDate","Date","toJSON","slice","toDate","compoundInterval","totalDays","calculatedInterest","totalAmount","interestValues","setInterestValues","interestValueChanged","event","target","name","value","calculateSimpleInterest","totalYears","daysDifference","interestValue","Math","round","Number","validateInterestValues","isNaN","calculateCompoundInterest","Grid","container","spacing","direction","justify","alignItems","item","xs","FormControl","component","FormLabel","RadioGroup","aria-label","onChange","row","size","FormControlLabel","control","Radio","color","label","TextField","type","variant","fullWidth","InputLabel","id","Select","labelId","MenuItem","Button","onClick","timeDifference","abs","ceil","Typography","useStyles","makeStyles","theme","fieldControl","width","maxWidth","buttonControl","height","minHeight","margin","AddUpdateRatio","details","closeDialog","addStrategy","updateStrategy","teamOne","teamTwo","legs","legType","legName","legSide","ratio","teamOneWin","teamTwoWin","strategy","setStrategy","useEffect","strategyDetails","onValueChangeEvent","e","onLegValueChangeEvent","leg","existingLegs","filter","i","newLeg","push","_","orderBy","classes","className","Dialog","open","state","onClose","DialogTitle","map","Fragment","Divider","tableContainer","maxHeight","marginTop","StyledTableCell","withStyles","head","backgroundColor","palette","common","white","body","fontSize","fontWeight","TableCell","StyledTableRow","root","action","hover","TableRow","RatioStrategy","dialogDetails","setDialogDetails","strategies","setStrategies","calculateProfitLoss","newStrategy","profit","style","marginLeft","Paper","TableContainer","Table","stickyHeader","TableHead","length","TableBody","IconButton","openDialogForEdit","Edit","filteredStrategies","deleteStrategy","Delete","Router","path","exact","navLinkStyle","padding","border","textDecoration","textAlign","activeNavLinkStyle","App","to","activeStyle","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oTAQe,SAASA,IAAsB,IAAD,EAEGC,mBAAS,CAAEC,aAAc,KAAMC,OAAQ,EAAGC,aAAc,EAAGC,UAAU,IAAIC,MAAOC,SAASC,MAAM,EAAG,IAAKC,QAAQ,IAAIH,MAAOC,SAASC,MAAM,EAAG,IAAKE,iBAAkB,EAAGC,UAAW,EAAGC,mBAAoB,EAAGC,YAAa,IAF3N,mBAElCC,EAFkC,KAElBC,EAFkB,KAInCC,EAAuB,SAACC,GAC1BF,EAAkB,2BAAKD,GAAN,kBAAuBG,EAAMC,OAAOC,KAAOF,EAAMC,OAAOE,UAcvEC,EAA0B,SAACC,EAAYC,GAEzC,IAAMC,EAAgBC,KAAKC,MAAOZ,EAAeX,QAAUW,EAAeV,aAAekB,GAAe,KAExGP,EAAkB,2BAAKD,GAAN,IAAsBF,mBAAoBY,EAAeX,YAAac,OAAOb,EAAeX,QAAUqB,EAAeb,UAAWY,MAG/IK,EAAyB,SAACvB,EAAUI,GACtC,QAAIoB,MAAMf,EAAeX,SAAWW,EAAeX,OAAS,MAIxD0B,MAAMf,EAAeV,eAAiD,IAAhCU,EAAeV,gBAKrDK,EAASJ,KAOXyB,EAA4B,SAACR,EAAYC,GAC3C,IAAMb,EAAmBI,EAAeJ,kBAAoB,GAAKI,EAAeJ,kBAC1EG,EAAcC,EAAeX,OAAf,SAA0B,EAAKW,EAAeV,cAAmC,IAAnBM,GAA8BA,EAAmBY,GAEnIP,EAAkB,2BAAKD,GAAN,IAAsBF,mBAAoBe,OAAOb,EAAeX,QAAUU,EAAaA,YAAaA,EAAaF,UAAWY,MAGjJ,OACI,eAACQ,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,UAAU,SAClCC,QAAQ,SACRC,WAAW,SAFf,UAII,cAACL,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAf,SACI,eAACC,EAAA,EAAD,CAAaC,UAAU,WAAvB,UACI,cAACC,EAAA,EAAD,CAAWD,UAAU,SAArB,2BACA,eAACE,EAAA,EAAD,CAAYC,aAAW,gBAAgBvB,MAAON,EAAeZ,aAAciB,KAAK,eAAeyB,SAAU5B,EAAsB6B,KAAG,EAACC,KAAK,QAAxI,UACI,cAACC,EAAA,EAAD,CAAkB3B,MAAM,KAAK4B,QAAS,cAACC,EAAA,EAAD,CAAOC,MAAM,YAAcC,MAAM,OACvE,cAACJ,EAAA,EAAD,CAAkB3B,MAAM,KAAK4B,QAAS,cAACC,EAAA,EAAD,CAAOC,MAAM,YAAcC,MAAM,eAInF,cAACpB,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAf,SACI,cAACc,EAAA,EAAD,CAAWC,KAAK,SAASF,MAAM,SAASG,QAAQ,WAAWV,SAAU5B,EAAsBG,KAAK,SAASC,MAAON,EAAeX,OAAQoD,WAAS,EAACT,KAAK,YAE1J,cAACf,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAf,SACI,cAACc,EAAA,EAAD,CAAWC,KAAK,SAASF,MAAM,uBAAuBG,QAAQ,WAAWnC,KAAK,eAAeyB,SAAU5B,EAAsBI,MAAON,EAAeV,aAAcmD,WAAS,EAACT,KAAK,YAEnJ,OAAhChC,EAAeZ,aACZ,cAAC6B,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAf,SACI,eAACC,EAAA,EAAD,CAAae,QAAQ,WAAWC,WAAS,EAAzC,UACI,cAACC,EAAA,EAAD,CAAYC,GAAG,oCAAf,sBACA,eAACC,EAAA,EAAD,CACIC,QAAQ,oCACRF,GAAG,8BACHrC,MAAON,EAAeJ,iBAAkBS,KAAK,mBAC7CgC,MAAM,WAAWP,SAAU5B,EAAsB8B,KAAK,QAAQS,WAAS,EAJ3E,UAMI,cAACK,EAAA,EAAD,CAAUxC,MAAO,EAAjB,qBACA,cAACwC,EAAA,EAAD,CAAUxC,MAAO,EAAjB,sBACA,cAACwC,EAAA,EAAD,CAAUxC,MAAO,EAAjB,wBACA,cAACwC,EAAA,EAAD,CAAUxC,MAAO,GAAjB,4BAGA,GAChB,cAACW,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAf,SACI,cAACc,EAAA,EAAD,CAAWD,MAAM,YAAYE,KAAK,OAAOC,QAAQ,WAAWnC,KAAK,WAAWC,MAAON,EAAeT,SAAUuC,SAAU5B,EAAsBuC,WAAS,EAACT,KAAK,YAE/J,cAACf,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAf,SACI,cAACc,EAAA,EAAD,CAAWD,MAAM,UAAUE,KAAK,OAAOlC,KAAK,SAASmC,QAAQ,WAAWlC,MAAON,EAAeL,OAAQmC,SAAU5B,EAAsBuC,WAAS,EAACT,KAAK,YAEzJ,cAACf,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAf,SACI,cAACuB,EAAA,EAAD,CAAQP,QAAQ,YAAYJ,MAAM,UAAUY,QAtF9B,WACtB,IAAMzD,EAAW,IAAIC,KAAKQ,EAAeT,UACnCI,EAAS,IAAIH,KAAKQ,EAAeL,QACvC,GAAImB,EAAuBvB,EAAUI,GAAS,CAC1C,IAAMsD,EAAiBtC,KAAKuC,IAAIvD,EAASJ,GACnCkB,EAAiBE,KAAKwC,KAAKF,EAAc,OACzCzC,EAAaC,EAAiB,IACJ,OAAhCT,EAAeZ,aAAwBmB,EAAwBC,EAAYC,GAAkBO,EAA0BR,EAAYC,KA+EvDgC,WAAS,EAACT,KAAK,QAAvF,yBAGAhC,EAAeF,mBAAsB,cAACmB,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAf,SACjC,eAAC4B,EAAA,EAAD,iCACwBpD,EAAeX,OADvC,IAC+C,uBAD/C,mBAEqBW,EAAeV,aAFpC,IAEkD,uBAFlD,mBAGqBU,EAAeZ,aAHpC,IAGkD,uBAHlD,eAIiBY,EAAeT,SAJhC,IAI0C,uBAJ1C,aAKeS,EAAeL,OAL9B,IAKsC,uBALtC,gBAMkBK,EAAeH,UANjC,IAM4C,uBAN5C,oBAOsBG,EAAeF,mBAPrC,IAOyD,uBAPzD,kBAQoBE,EAAeD,iBAE3B,M,mKC/GtBsD,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,aAAc,CACVC,MAAO,MACPC,SAAU,KAEdC,cAAe,CACXF,MAAO,OAEXvC,UAAW,CACPuC,MAAO,IACPG,OAAQ,IACRC,UAAW,OACXC,OAAQ,QAoFDC,MAhFf,YAAgF,IAAtDC,EAAqD,EAArDA,QAASC,EAA4C,EAA5CA,YAAaC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,eAAkB,EAE3ChF,mBAAS,CAAEiF,QAAS,GAAIC,QAAS,GAAIC,KAAM,CAAC,CAAEC,QAAS,QAASC,QAAS,GAAIC,QAAS,IAAKC,MAAO,EAAGrF,OAAQ,GAAK,CAAEkF,QAAS,QAASC,QAAS,GAAIC,QAAS,IAAKC,MAAO,EAAGrF,OAAQ,GAAK,CAAEkF,QAAS,QAASC,QAAS,GAAIC,QAAS,IAAKC,MAAO,EAAGrF,OAAQ,IAAOsF,WAAY,EAAGC,WAAY,IAFhP,mBAEpEC,EAFoE,KAE1DC,EAF0D,KAI3EC,qBAAU,WACFf,EAAQgB,iBACRF,EAAYd,EAAQgB,mBAEzB,CAAChB,EAAQgB,kBAEZ,IAAMC,EAAqB,SAAAC,GACvBJ,EAAY,2BAAKD,GAAN,kBAAiBK,EAAE9E,OAAOC,KAAO6E,EAAE9E,OAAOE,UAGnD6E,EAAwB,SAACD,EAAGE,GAC9B,IAAIC,EAAeR,EAASP,KAAKgB,QAAO,SAAAC,GAAC,OAAIA,EAAEhB,UAAYa,EAAIb,WAC3DiB,EAAM,eAAQJ,GAClBI,EAAON,EAAE9E,OAAOC,MAAQ6E,EAAE9E,OAAOE,MACjC+E,EAAaI,KAAKD,GAClBV,EAAY,2BAAKD,GAAN,IAAgBP,KAAMoB,IAAEC,QAAQN,EAAc,eAGvDO,EAAUvC,IAEhB,OACI,qBAAKwC,UAAWD,EAAQ1E,UAAxB,SACI,eAAC4E,EAAA,EAAD,CAAQC,KAAM/B,EAAQgC,MAAOC,QAAShC,EAAtC,UACI,eAACiC,EAAA,EAAD,WAAclC,EAAQgB,gBAAkB,SAAW,MAAnD,eACA,eAAC/D,EAAA,EAAD,CAAMC,WAAS,EAACE,UAAU,MAAMC,QAAQ,SAASC,WAAW,SAASH,QAAS,EAAG0E,UAAWD,EAAQ1E,UAApG,UACI,cAACD,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,EAAf,SACI,cAACc,EAAA,EAAD,CAAWE,QAAQ,WAAWH,MAAM,cAAcL,KAAK,QAAQS,WAAW,EAAMpC,KAAK,UAAUC,MAAOuE,EAAST,QAAStC,SAAUmD,MAEtI,cAAChE,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,EAAf,SACI,cAACc,EAAA,EAAD,CAAWE,QAAQ,WAAWH,MAAM,cAAcL,KAAK,QAAQS,WAAW,EAAMpC,KAAK,UAAUC,MAAOuE,EAASR,QAASvC,SAAUmD,MAGlIJ,EAASP,KAAK6B,KAAI,SAAAf,GAAG,OACjB,eAAC,IAAMgB,SAAP,WACI,eAACnF,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAf,UACI,cAAC6E,EAAA,EAAD,IACA,cAACjD,EAAA,EAAD,CAAYhB,MAAM,YAAlB,SAA+BgD,EAAIb,aAEvC,cAACtD,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,EAAf,SACI,eAACC,EAAA,EAAD,CAAaC,UAAU,WAAvB,UACI,cAACC,EAAA,EAAD,CAAWD,UAAU,SAArB,qBACA,eAACE,EAAA,EAAD,CAAYC,aAAW,OAAOxB,KAAK,UAAUC,MAAO8E,EAAIX,QAAS1C,KAAG,EAACD,SAAU,SAACoD,GAAD,OAAOC,EAAsBD,EAAGE,IAA/G,UACI,cAACnD,EAAA,EAAD,CAAkB3B,MAAM,IAAI4B,QAAS,cAACC,EAAA,EAAD,IAAWE,MAAM,UACtD,cAACJ,EAAA,EAAD,CAAkB3B,MAAM,IAAI4B,QAAS,cAACC,EAAA,EAAD,IAAWE,MAAM,kBAIlE,cAACpB,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,EAAf,SACI,cAACc,EAAA,EAAD,CAAWE,QAAQ,WAAWH,MAAM,WAAWL,KAAK,QAAQS,WAAW,EAAMpC,KAAK,UAAUC,MAAO8E,EAAIZ,QAAS1C,SAAU,SAACoD,GAAD,OAAOC,EAAsBD,EAAGE,QAE9J,cAACnE,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,EAAf,SACI,cAACc,EAAA,EAAD,CAAWE,QAAQ,WAAWH,MAAM,QAAQL,KAAK,QAAQS,WAAW,EAAMpC,KAAK,QAAQC,MAAO8E,EAAIV,MAAO5C,SAAU,SAACoD,GAAD,OAAOC,EAAsBD,EAAGE,QAEvJ,cAACnE,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,EAAf,SACI,cAACc,EAAA,EAAD,CAAWE,QAAQ,WAAWH,MAAM,WAAWL,KAAK,QAAQS,WAAW,EAAMpC,KAAK,SAASC,MAAO8E,EAAI/F,OAAQyC,SAAU,SAACoD,GAAD,OAAOC,EAAsBD,EAAGE,UArB3IA,EAAIb,YA2BjC,cAACtD,EAAA,EAAD,CAAMM,MAAI,EAACL,WAAS,EAACG,QAAQ,eAAeC,WAAW,SAASF,UAAU,MAA1E,SACI,qCAEQ4C,EAAQgB,gBAAmB,cAACjC,EAAA,EAAD,CAAQP,QAAQ,YAAYJ,MAAM,UAAUJ,KAAK,QAAQ6D,UAAWD,EAAQjC,cAAeX,QAAS,kBAAMmB,EAAeU,IAAzH,oBACvB,cAAC9B,EAAA,EAAD,CAAQP,QAAQ,YAAYJ,MAAM,UAAUJ,KAAK,QAAQ6D,UAAWD,EAAQjC,cAAeX,QAAS,kBAAMkB,EAAYW,IAAtH,kBAGR,cAAC9B,EAAA,EAAD,CAAQP,QAAQ,YAAYJ,MAAM,YAAYJ,KAAK,QAAQ6D,UAAWD,EAAQjC,cAAeX,QAASiB,EAAtG,kC,OCrFtBZ,EAAYC,YAAW,CACzBgD,eAAgB,CACZC,UAAW,IACXzC,OAAQ,EACRL,MAAO,OAEXD,aAAc,CACVC,MAAO,MACPC,SAAU,IACV8C,UAAW,MAIbC,EAAkBC,aAAW,SAACnD,GAAD,MAAY,CAC3CoD,KAAM,CACFC,gBAAiB,aACjBxE,MAAOmB,EAAMsD,QAAQC,OAAOC,OAEhCC,KAAM,CACFC,SAAU,GACVC,WAAY,UAPIR,CASpBS,KAEEC,EAAiBV,aAAW,SAACnD,GAAD,MAAY,CAC1C8D,KAAM,CACF,qBAAsB,CAClBT,gBAAiBrD,EAAMsD,QAAQS,OAAOC,WAH3Bb,CAMnBc,KA+HWC,MA9Hf,WAA0B,IAAD,EAEqBtI,mBAAS,CAAE6G,OAAO,EAAOhB,gBAAiB,OAF/D,mBAEd0C,EAFc,KAECC,EAFD,OAGexI,mBAAS,IAHxB,mBAGdyI,EAHc,KAGFC,EAHE,KAaf5D,EAAc,WAChB0D,EAAiB,CAAE3B,OAAO,EAAOhB,gBAAiB,QAyBhD8C,EAAsB,SAAAC,GACxBA,EAAYpD,WAAa,EACzBoD,EAAYnD,WAAa,EAFc,oBAGvBmD,EAAYzD,MAHW,IAGvC,2BAAkC,CAAC,IAA1Bc,EAAyB,QACxB4C,EAAS5C,EAAI/F,OAAS+F,EAAIV,MACZ,MAAhBU,EAAIX,SACJsD,EAAYpD,YAAcqD,EAC1BD,EAAYnD,YAAcQ,EAAI/F,SAG9B0I,EAAYpD,YAAcS,EAAI/F,OAC9B0I,EAAYnD,YAAcoD,IAXK,gCAgBrCpC,EAAUvC,IAEhB,OACI,qCACI,gCACI,cAACN,EAAA,EAAD,CAAQP,QAAQ,YAAYJ,MAAM,UAAUJ,KAAK,QAAQgB,QAvDlD,WACf2E,EAAiB,2BAAKD,GAAN,IAAqB1B,OAAO,MAsD0CiC,MAAO,CAAEzB,UAAW,OAAQ0B,WAAY,QAAtH,sBACA,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAgB1G,UAAWyG,IAAOtC,UAAWD,EAAQU,eAArD,SACI,eAAC+B,EAAA,EAAD,CAAOC,cAAY,EAACtG,KAAK,QAAzB,UACI,cAACuG,EAAA,EAAD,UACI,eAACf,EAAA,EAAD,WACI,cAACf,EAAD,oBACA,cAACA,EAAD,4BACA,cAACA,EAAD,4BAEImB,EAAWY,OAAS,GAAKZ,EAAW,GAAGtD,KAAK6B,KAAI,SAAAf,GAAG,OAC/C,cAAC,IAAMgB,SAAP,UACI,cAACK,EAAD,UACKrB,EAAIb,WAFQa,EAAIb,YAOjC,cAACkC,EAAD,2BAGR,cAACgC,EAAA,EAAD,UACKb,EAAWzB,KAAI,SAACtB,GAAD,OACZ,eAACuC,EAAD,WACI,eAACX,EAAD,WACK5B,EAAST,QADd,OAC2BS,EAASR,WAEpC,cAACoC,EAAD,CAAiBwB,MAAOpD,EAASF,WAAa,EAAI,CAAEvC,MAAO,OAAU,CAAEA,MAAO,QAA9E,SACKyC,EAASF,aAEd,cAAC8B,EAAD,CAAiBwB,MAAOpD,EAASD,WAAa,EAAI,CAAExC,MAAO,OAAU,CAAEA,MAAO,QAA9E,SACKyC,EAASD,aAGVC,EAASP,KAAK6B,KAAI,SAAAf,GAAG,OACjB,cAAC,IAAMgB,SAAP,UACI,eAACK,EAAD,WACqB,MAAhBrB,EAAIX,QAAkBI,EAAST,QAAUS,EAASR,QADvD,MACmEe,EAAIV,MADvE,MACiFU,EAAI/F,OADrF,MACgG+F,EAAIZ,YAFnFY,EAAIb,YAOjC,eAACkC,EAAD,WACI,cAACiC,EAAA,EAAD,CAAY1G,KAAK,QAAQgB,QAAS,kBA9FhD,SAAC6B,GACvB8C,EAAiB,CAAE3C,gBAAgB,eAAMH,GAAYmB,OAAO,IA6FgB2C,CAAkB9D,IAA1D,SACI,cAAC+D,EAAA,EAAD,CAAM5G,KAAK,QAAQI,MAAM,cAE7B,cAACsG,EAAA,EAAD,CAAY1G,KAAK,QAAQgB,QAAS,kBAxEnD,SAACL,GACpB,IAAIkG,EAAqBjB,EAAWtC,QAAO,SAAAC,GAAC,OAAIA,EAAE5C,KAAOA,KACzDkF,EAAcgB,GAsE8DC,CAAejE,EAASlC,KAAhE,SACI,cAACoG,EAAA,EAAD,CAAQ/G,KAAK,QAAQI,MAAM,qBAxBlByC,EAASlC,mBAoClD+E,EAAc1B,OACV,cAAC,EAAD,CAAgBhC,QAAS0D,EAAezD,YAAaA,EAAaC,YAvG9D,SAACW,GACjB,IAAIkD,EAAW,eAAQlD,GACvBkD,EAAYpF,GAAKoF,EAAY3D,QAAU2D,EAAY1D,QACnDyD,EAAoBC,GACpBF,EAAcnC,IAAEC,QAAF,sBAAciC,GAAd,CAA0BG,IAAc,OACtD9D,KAkGwGE,eA/FrF,SAACU,GACpB,IAAIgE,EAAqBjB,EAAWtC,QAAO,SAAAC,GAAC,OAAIA,EAAE5C,KAAOkC,EAASlC,MAC9DoF,EAAW,eAAQlD,GACvBiD,EAAoBC,GACpBc,EAAmBpD,KAAKsC,GACxBF,EAAcnC,IAAEC,QAAQkD,EAAoB,OAC5C5E,WCvDO+E,MATf,WACI,OACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAK,SAASvH,UAAW+F,IAChC,cAAC,IAAD,CAAOyB,OAAK,EAACD,KAAK,IAAIvH,UAAWxC,QCLvCiK,EAAe,CACnBC,QAAS,OAAQhH,MAAO,QAASiH,OAAQ,MAAOzC,gBAAiB,OAAQ9C,OAAQ,MAAOwF,eAAgB,OAAQ1F,OAAQ,OAAQ2F,UAAW,UAEvIC,EAAqB,CACzBJ,QAAS,OAAQhH,MAAO,QAASiH,OAAQ,MAAOvF,OAAQ,MAAOwF,eAAgB,OAAQ1F,OAAQ,OAAQ2F,UAAW,UAerGE,OAZf,WACE,OACE,sBAAKxB,MAAO,CAAEnE,OAAQ,IAAKsF,QAAS,IAAK3F,MAAO,OAAQG,OAAQ,QAAhE,UACE,cAAC,IAAD,CAAS8F,GAAG,IAAIzB,MAAOkB,EAAcQ,YAAaH,EAAlD,iCACA,cAAC,IAAD,CAASE,GAAG,SAASzB,MAAOkB,EAAcQ,YAAaH,EAAvD,mBACA,qBAAKvB,MAAO,CAAEzB,UAAW,QAAzB,SACE,cAAC,EAAD,UCLOoD,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,GAAD,QAGJC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6de9e87d.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport {\r\n    Radio, RadioGroup, FormControlLabel, FormControl, FormLabel, TextField,\r\n    Button, InputLabel, MenuItem, Select, Grid, Typography\r\n} from '@material-ui/core';\r\n\r\nconst widthStyle = { width: '80%', maxWidth: '700px' }\r\n\r\nexport default function InterestCalculator() {\r\n\r\n    const [interestValues, setInterestValues] = useState({ interestType: \"si\", amount: 0, interestRate: 0, fromDate: new Date().toJSON().slice(0, 10), toDate: new Date().toJSON().slice(0, 10), compoundInterval: 1, totalDays: 0, calculatedInterest: 0, totalAmount: 0 });\r\n\r\n    const interestValueChanged = (event) => {\r\n        setInterestValues({ ...interestValues, [event.target.name]: event.target.value });\r\n    };\r\n\r\n    const calculateInterest = () => {\r\n        const fromDate = new Date(interestValues.fromDate);\r\n        const toDate = new Date(interestValues.toDate);\r\n        if (validateInterestValues(fromDate, toDate)) {\r\n            const timeDifference = Math.abs(toDate - fromDate);\r\n            const daysDifference = Math.ceil(timeDifference / (1000 * 60 * 60 * 24));\r\n            const totalYears = daysDifference / 365;\r\n            interestValues.interestType === \"si\" ? calculateSimpleInterest(totalYears, daysDifference) : calculateCompoundInterest(totalYears, daysDifference);\r\n        }\r\n    }\r\n\r\n    const calculateSimpleInterest = (totalYears, daysDifference) => {\r\n        //debugger;\r\n        const interestValue = Math.round((interestValues.amount * (interestValues.interestRate * totalYears)) / 100);\r\n\r\n        setInterestValues({ ...interestValues, calculatedInterest: interestValue, totalAmount: Number(interestValues.amount) + interestValue, totalDays: daysDifference });\r\n    }\r\n\r\n    const validateInterestValues = (fromDate, toDate) => {\r\n        if (isNaN(interestValues.amount) || interestValues.amount < 0) {\r\n            // Principal amount should be greater than 0\r\n            return false;\r\n        }\r\n        if (isNaN(interestValues.interestRate) || interestValues.interestRate === 0) {\r\n\r\n            // interest should not be 0\r\n            return false;\r\n        }\r\n        if (toDate < fromDate) {\r\n            // to date should be greater than from date\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    const calculateCompoundInterest = (totalYears, daysDifference) => {\r\n        const compoundInterval = interestValues.compoundInterval * (12 / interestValues.compoundInterval);\r\n        const totalAmount = interestValues.amount * ((1 + (interestValues.interestRate / (compoundInterval * 100))) ** (compoundInterval * totalYears))\r\n\r\n        setInterestValues({ ...interestValues, calculatedInterest: Number(interestValues.amount) - totalAmount, totalAmount: totalAmount, totalDays: daysDifference });\r\n    }\r\n\r\n    return (\r\n        <Grid container spacing={2} direction=\"column\"\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n        >\r\n            <Grid item xs={12}>\r\n                <FormControl component=\"fieldset\">\r\n                    <FormLabel component=\"legend\">Interest Type</FormLabel>\r\n                    <RadioGroup aria-label=\"Interest Type\" value={interestValues.interestType} name=\"interestType\" onChange={interestValueChanged} row size=\"small\">\r\n                        <FormControlLabel value=\"si\" control={<Radio color=\"primary\" />} label=\"SI\" />\r\n                        <FormControlLabel value=\"ci\" control={<Radio color=\"primary\" />} label=\"CI\" />\r\n                    </RadioGroup>\r\n                </FormControl>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <TextField type=\"number\" label=\"Amount\" variant=\"outlined\" onChange={interestValueChanged} name=\"amount\" value={interestValues.amount} fullWidth size=\"small\" />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <TextField type=\"number\" label=\"Interest Rate (in %)\" variant=\"outlined\" name=\"interestRate\" onChange={interestValueChanged} value={interestValues.interestRate} fullWidth size=\"small\" />\r\n            </Grid>\r\n            {interestValues.interestType === \"ci\" ? (\r\n                <Grid item xs={12}>\r\n                    <FormControl variant=\"outlined\" fullWidth>\r\n                        <InputLabel id=\"demo-simple-select-outlined-label\">Interval</InputLabel>\r\n                        <Select\r\n                            labelId=\"demo-simple-select-outlined-label\"\r\n                            id=\"demo-simple-select-outlined\"\r\n                            value={interestValues.compoundInterval} name=\"compoundInterval\"\r\n                            label=\"Interval\" onChange={interestValueChanged} size=\"small\" fullWidth\r\n                        >\r\n                            <MenuItem value={1}>Monthly</MenuItem>\r\n                            <MenuItem value={3}>Quaterly</MenuItem>\r\n                            <MenuItem value={6}>HalfYearly</MenuItem>\r\n                            <MenuItem value={12}>Yearly</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                </Grid>) : (\"\")}\r\n            <Grid item xs={12}>\r\n                <TextField label=\"From Date\" type=\"date\" variant=\"outlined\" name=\"fromDate\" value={interestValues.fromDate} onChange={interestValueChanged} fullWidth size=\"small\" />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <TextField label=\"To Date\" type=\"date\" name=\"toDate\" variant=\"outlined\" value={interestValues.toDate} onChange={interestValueChanged} fullWidth size=\"small\" />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={calculateInterest} fullWidth size=\"small\">Calculate</Button>\r\n            </Grid>\r\n            {\r\n                interestValues.calculatedInterest ? (<Grid item xs={12}>\r\n                    <Typography>\r\n                        Principle Amount : {interestValues.amount} <br />\r\n                        Interest Rate : {interestValues.interestRate} <br />\r\n                        Interest Type : {interestValues.interestType} <br />\r\n                        From date : {interestValues.fromDate} <br />\r\n                        To date : {interestValues.toDate} <br />\r\n                        Total Days : {interestValues.totalDays} <br />\r\n                        Interest Amount: {interestValues.calculatedInterest} <br />\r\n                        Total Amount : {interestValues.totalAmount}\r\n                    </Typography>\r\n                </Grid>) : (\"\")\r\n            }\r\n\r\n        </Grid>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Dialog, DialogTitle, Grid, TextField, Button, Typography, Divider, FormControl, FormLabel, FormControlLabel, Radio, RadioGroup } from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport _ from 'lodash'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    fieldControl: {\r\n        width: '80%',\r\n        maxWidth: 300\r\n    },\r\n    buttonControl: {\r\n        width: '40%',\r\n    },\r\n    container: {\r\n        width: 500,\r\n        height: 650,\r\n        minHeight: '100%',\r\n        margin: 10,\r\n    },\r\n}));\r\n\r\nfunction AddUpdateRatio({ details, closeDialog, addStrategy, updateStrategy }) {\r\n\r\n    const [strategy, setStrategy] = useState({ teamOne: '', teamTwo: '', legs: [{ legType: 'Leg 1', legName: '', legSide: '1', ratio: 0, amount: 0 }, { legType: 'Leg 2', legName: '', legSide: '2', ratio: 0, amount: 0 }, { legType: 'Leg 3', legName: '', legSide: '2', ratio: 0, amount: 0 },], teamOneWin: 0, teamTwoWin: 0 })\r\n\r\n    useEffect(() => {\r\n        if (details.strategyDetails) {\r\n            setStrategy(details.strategyDetails);\r\n        }\r\n    }, [details.strategyDetails])\r\n\r\n    const onValueChangeEvent = e => {\r\n        setStrategy({ ...strategy, [e.target.name]: e.target.value })\r\n    }\r\n\r\n    const onLegValueChangeEvent = (e, leg) => {\r\n        let existingLegs = strategy.legs.filter(i => i.legType !== leg.legType);\r\n        let newLeg = { ...leg }\r\n        newLeg[e.target.name] = e.target.value;\r\n        existingLegs.push(newLeg);\r\n        setStrategy({ ...strategy, legs: _.orderBy(existingLegs, 'legType') })\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <Dialog open={details.state} onClose={closeDialog}>\r\n                <DialogTitle>{details.strategyDetails ? 'Update' : 'Add'} Strategy</DialogTitle>\r\n                <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={2} className={classes.container}>\r\n                    <Grid item xs={6}>\r\n                        <TextField variant=\"outlined\" label=\"Team 1 name\" size=\"small\" fullWidth={true} name=\"teamOne\" value={strategy.teamOne} onChange={onValueChangeEvent} />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <TextField variant=\"outlined\" label=\"Team 2 name\" size=\"small\" fullWidth={true} name=\"teamTwo\" value={strategy.teamTwo} onChange={onValueChangeEvent} />\r\n                    </Grid>\r\n                    {\r\n                        strategy.legs.map(leg => (\r\n                            <React.Fragment key={leg.legType}>\r\n                                <Grid item xs={12}>\r\n                                    <Divider />\r\n                                    <Typography color=\"secondary\">{leg.legType}</Typography>\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <FormControl component=\"fieldset\">\r\n                                        <FormLabel component=\"legend\">My Team</FormLabel>\r\n                                        <RadioGroup aria-label=\"team\" name=\"legSide\" value={leg.legSide} row onChange={(e) => onLegValueChangeEvent(e, leg)}>\r\n                                            <FormControlLabel value=\"1\" control={<Radio />} label=\"Team1\" />\r\n                                            <FormControlLabel value=\"2\" control={<Radio />} label=\"Team2\" />\r\n                                        </RadioGroup>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <TextField variant=\"outlined\" label=\"Leg Name\" size=\"small\" fullWidth={true} name=\"legName\" value={leg.legName} onChange={(e) => onLegValueChangeEvent(e, leg)} />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <TextField variant=\"outlined\" label=\"Ratio\" size=\"small\" fullWidth={true} name=\"ratio\" value={leg.ratio} onChange={(e) => onLegValueChangeEvent(e, leg)} />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <TextField variant=\"outlined\" label=\"Invested\" size=\"small\" fullWidth={true} name=\"amount\" value={leg.amount} onChange={(e) => onLegValueChangeEvent(e, leg)} />\r\n                                </Grid>\r\n                            </React.Fragment>\r\n                        ))\r\n                    }\r\n\r\n                    <Grid item container justify=\"space-around\" alignItems=\"center\" direction=\"row\">\r\n                        <>\r\n                            {\r\n                                details.strategyDetails ? (<Button variant=\"contained\" color=\"primary\" size=\"small\" className={classes.buttonControl} onClick={() => updateStrategy(strategy)} >Update</Button>) : (\r\n                                    <Button variant=\"contained\" color=\"primary\" size=\"small\" className={classes.buttonControl} onClick={() => addStrategy(strategy)} >Save</Button>\r\n                                )\r\n                            }\r\n                            <Button variant=\"contained\" color=\"secondary\" size=\"small\" className={classes.buttonControl} onClick={closeDialog}>Cancel</Button>\r\n                        </>\r\n                    </Grid>\r\n                </Grid>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddUpdateRatio\r\n","import React, { useState } from 'react'\r\nimport { Button, Paper, TableContainer, Table, TableBody, TableRow, TableHead, TableCell, IconButton } from '@material-ui/core'\r\nimport { Edit, Delete } from '@material-ui/icons'\r\nimport AddUpdateRatio from './AddUpdateRatio'\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport _ from 'lodash'\r\n\r\nconst useStyles = makeStyles({\r\n    tableContainer: {\r\n        maxHeight: 500,\r\n        margin: 7,\r\n        width: '95%'\r\n    },\r\n    fieldControl: {\r\n        width: '80%',\r\n        maxWidth: 300,\r\n        marginTop: 10\r\n    },\r\n});\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        backgroundColor: 'dodgerBlue',\r\n        color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n        fontSize: 12,\r\n        fontWeight: \"600\"\r\n    },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: theme.palette.action.hover,\r\n        },\r\n    },\r\n}))(TableRow);\r\nfunction RatioStrategy() {\r\n\r\n    const [dialogDetails, setDialogDetails] = useState({ state: false, strategyDetails: null })\r\n    const [strategies, setStrategies] = useState([])\r\n\r\n    const openDialog = () => {\r\n        setDialogDetails({ ...dialogDetails, state: true })\r\n    }\r\n\r\n    const openDialogForEdit = (strategy) => {\r\n        setDialogDetails({ strategyDetails: { ...strategy }, state: true })\r\n    }\r\n\r\n    const closeDialog = () => {\r\n        setDialogDetails({ state: false, strategyDetails: null })\r\n    }\r\n\r\n    const addStrategy = (strategy) => {\r\n        let newStrategy = { ...strategy }\r\n        newStrategy.id = newStrategy.teamOne + newStrategy.teamTwo\r\n        calculateProfitLoss(newStrategy);\r\n        setStrategies(_.orderBy([...strategies, newStrategy], 'id'))\r\n        closeDialog();\r\n    }\r\n\r\n    const updateStrategy = (strategy) => {\r\n        let filteredStrategies = strategies.filter(i => i.id !== strategy.id);\r\n        let newStrategy = { ...strategy }\r\n        calculateProfitLoss(newStrategy);\r\n        filteredStrategies.push(newStrategy);\r\n        setStrategies(_.orderBy(filteredStrategies, 'id'))\r\n        closeDialog();\r\n    }\r\n\r\n    const deleteStrategy = (id) => {\r\n        let filteredStrategies = strategies.filter(i => i.id !== id);\r\n        setStrategies(filteredStrategies)\r\n    }\r\n\r\n    const calculateProfitLoss = newStrategy => {\r\n        newStrategy.teamOneWin = 0;\r\n        newStrategy.teamTwoWin = 0;\r\n        for (let leg of newStrategy.legs) {\r\n            const profit = leg.amount * leg.ratio;\r\n            if (leg.legSide === '1') {\r\n                newStrategy.teamOneWin += profit\r\n                newStrategy.teamTwoWin -= leg.amount\r\n            }\r\n            else {\r\n                newStrategy.teamOneWin -= leg.amount\r\n                newStrategy.teamTwoWin += profit\r\n            }\r\n        }\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <Button variant='contained' color='primary' size='small' onClick={openDialog} style={{ marginTop: '10px', marginLeft: '20px' }}>Add Team</Button>\r\n                <Paper >\r\n                    <TableContainer component={Paper} className={classes.tableContainer}>\r\n                        <Table stickyHeader size=\"small\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <StyledTableCell>Teams</StyledTableCell>\r\n                                    <StyledTableCell>Team 1 Profit</StyledTableCell>\r\n                                    <StyledTableCell>Team 2 Profit</StyledTableCell>\r\n                                    {\r\n                                        strategies.length > 0 && strategies[0].legs.map(leg => (\r\n                                            <React.Fragment key={leg.legType}>\r\n                                                <StyledTableCell>\r\n                                                    {leg.legType}\r\n                                                </StyledTableCell>\r\n                                            </React.Fragment>\r\n                                        ))\r\n                                    }\r\n                                    <StyledTableCell>Actions</StyledTableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {strategies.map((strategy) => (\r\n                                    <StyledTableRow key={strategy.id}>\r\n                                        <StyledTableCell>\r\n                                            {strategy.teamOne} vs {strategy.teamTwo}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell style={strategy.teamOneWin < 0 ? { color: 'red' } : { color: 'blue' }}>\r\n                                            {strategy.teamOneWin}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell style={strategy.teamTwoWin < 0 ? { color: 'red' } : { color: 'blue' }}>\r\n                                            {strategy.teamTwoWin}\r\n                                        </StyledTableCell>\r\n                                        {\r\n                                            strategy.legs.map(leg => (\r\n                                                <React.Fragment key={leg.legType}>\r\n                                                    <StyledTableCell>\r\n                                                        {leg.legSide === '1' ? strategy.teamOne : strategy.teamTwo} / {leg.ratio} / {leg.amount} / {leg.legName}\r\n                                                    </StyledTableCell>\r\n                                                </React.Fragment>\r\n                                            ))\r\n                                        }\r\n                                        <StyledTableCell>\r\n                                            <IconButton size=\"small\" onClick={() => openDialogForEdit(strategy)}>\r\n                                                <Edit size=\"small\" color=\"primary\" />\r\n                                            </IconButton>\r\n                                            <IconButton size=\"small\" onClick={() => deleteStrategy(strategy.id)}>\r\n                                                <Delete size=\"small\" color=\"secondary\" />\r\n                                            </IconButton>\r\n                                        </StyledTableCell>\r\n\r\n                                    </StyledTableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Paper>\r\n            </div>\r\n            {\r\n                dialogDetails.state && (\r\n                    <AddUpdateRatio details={dialogDetails} closeDialog={closeDialog} addStrategy={addStrategy} updateStrategy={updateStrategy} />\r\n                )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RatioStrategy\r\n","import React from 'react'\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport InterestCalculator from '../components/calculator/InterestCalculator'\r\nimport RatioStrategy from '../components/ratioStrategy/RatioStrategy'\r\n\r\nfunction Router() {\r\n    return (\r\n        <Switch>\r\n            <Route path='/ratio' component={RatioStrategy} />\r\n            <Route exact path='/' component={InterestCalculator} />\r\n        </Switch>\r\n    )\r\n}\r\n\r\nexport default Router;","import React from 'react'\nimport { NavLink } from 'react-router-dom';\nimport Router from './routes/Router'\n\nconst navLinkStyle = {\n  padding: '10px', color: 'white', border: '2px', backgroundColor: 'blue', margin: '5px', textDecoration: 'none', height: '35px', textAlign: 'center'\n}\nconst activeNavLinkStyle = {\n  padding: '10px', color: 'white', border: '2px', margin: '5px', textDecoration: 'none', height: '35px', textAlign: 'center'\n}\n\nfunction App() {\n  return (\n    <div style={{ margin: '0', padding: '0', width: '100%', height: '100%', }}>\n      <NavLink to='/' style={navLinkStyle} activeStyle={activeNavLinkStyle}>Interest Calculator</NavLink>\n      <NavLink to='/ratio' style={navLinkStyle} activeStyle={activeNavLinkStyle}>Ratio</NavLink>\n      <div style={{ marginTop: '20px' }}>\n        <Router />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}