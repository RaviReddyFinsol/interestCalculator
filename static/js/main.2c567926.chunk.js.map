{"version":3,"sources":["components/calculator/InterestCalculator.js","App.js","reportWebVitals.js","index.js"],"names":["widthStyle","width","maxWidth","InterestCalculator","useState","interestType","amount","interestRate","fromDate","Date","toJSON","slice","toDate","compoundInterval","totalDays","calculatedInterest","totalAmount","interestValues","setInterestValues","interestValueChanged","event","target","name","value","calculateSimpleInterest","totalYears","daysDifference","interestValue","Math","round","Number","validateInterestValues","isNaN","calculateCompoundInterest","Grid","container","spacing","item","xs","FormControl","component","FormLabel","RadioGroup","aria-label","onChange","row","FormControlLabel","control","Radio","color","label","TextField","type","variant","style","InputLabel","id","Select","labelId","MenuItem","Button","onClick","timeDifference","abs","ceil","Typography","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2c567926.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport {\r\n    Radio, RadioGroup, FormControlLabel, FormControl, FormLabel, TextField,\r\n    Button, InputLabel, MenuItem, Select, Grid, Typography\r\n} from '@material-ui/core';\r\n\r\nconst widthStyle = { width: '80%', maxWidth: '700px' }\r\n\r\nexport default function InterestCalculator() {\r\n\r\n    const [interestValues, setInterestValues] = useState({ interestType: \"si\", amount: 0, interestRate: 0, fromDate: new Date().toJSON().slice(0, 10), toDate: new Date().toJSON().slice(0, 10), compoundInterval: 1, totalDays: 0, calculatedInterest: 0, totalAmount: 0 });\r\n\r\n    const interestValueChanged = (event) => {\r\n        setInterestValues({ ...interestValues, [event.target.name]: event.target.value });\r\n    };\r\n\r\n    const calculateInterest = () => {\r\n        const fromDate = new Date(interestValues.fromDate);\r\n        const toDate = new Date(interestValues.toDate);\r\n        if (validateInterestValues(fromDate, toDate)) {\r\n            const timeDifference = Math.abs(toDate - fromDate);\r\n            const daysDifference = Math.ceil(timeDifference / (1000 * 60 * 60 * 24));\r\n            const totalYears = daysDifference / 365;\r\n            interestValues.interestType === \"si\" ? calculateSimpleInterest(totalYears, daysDifference) : calculateCompoundInterest(totalYears, daysDifference);\r\n        }\r\n    }\r\n\r\n    const calculateSimpleInterest = (totalYears, daysDifference) => {\r\n        //debugger;\r\n        const interestValue = Math.round((interestValues.amount * (interestValues.interestRate * totalYears)) / 100);\r\n\r\n        setInterestValues({ ...interestValues, calculatedInterest: interestValue, totalAmount: Number(interestValues.amount) + interestValue, totalDays: daysDifference });\r\n    }\r\n\r\n    const validateInterestValues = (fromDate, toDate) => {\r\n        if (isNaN(interestValues.amount) || interestValues.amount < 0) {\r\n            // Principal amount should be greater than 0\r\n            return false;\r\n        }\r\n        if (isNaN(interestValues.interestRate) || interestValues.interestRate === 0) {\r\n\r\n            // interest should not be 0\r\n            return false;\r\n        }\r\n        if (toDate < fromDate) {\r\n            // to date should be greater than from date\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    const calculateCompoundInterest = (totalYears, daysDifference) => {\r\n        const compoundInterval = interestValues.compoundInterval * (12 / interestValues.compoundInterval);\r\n        const totalAmount = interestValues.amount * ((1 + (interestValues.interestRate / (compoundInterval * 100))) ** (compoundInterval * totalYears))\r\n\r\n        setInterestValues({ ...interestValues, calculatedInterest: Number(interestValues.amount) - totalAmount, totalAmount: totalAmount, totalDays: daysDifference });\r\n    }\r\n\r\n    return (\r\n        <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n                <FormControl component=\"fieldset\">\r\n                    <FormLabel component=\"legend\">Interest Type</FormLabel>\r\n                    <RadioGroup aria-label=\"Interest Type\" value={interestValues.interestType} name=\"interestType\" onChange={interestValueChanged} row>\r\n                        <FormControlLabel value=\"si\" control={<Radio color=\"primary\" />} label=\"SI\" />\r\n                        <FormControlLabel value=\"ci\" control={<Radio color=\"primary\" />} label=\"CI\" />\r\n                    </RadioGroup>\r\n                </FormControl>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <TextField type=\"number\" label=\"Amount\" variant=\"outlined\" onChange={interestValueChanged} name=\"amount\" value={interestValues.amount} style={widthStyle} />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <TextField type=\"number\" label=\"Interest Rate (in %)\" variant=\"outlined\" name=\"interestRate\" onChange={interestValueChanged} value={interestValues.interestRate} style={widthStyle} />\r\n            </Grid>\r\n            {interestValues.interestType === \"ci\" ? (\r\n                <Grid item xs={12}>\r\n                    <FormControl variant=\"outlined\" style={widthStyle}>\r\n                        <InputLabel id=\"demo-simple-select-outlined-label\">Interval</InputLabel>\r\n                        <Select\r\n                            labelId=\"demo-simple-select-outlined-label\"\r\n                            id=\"demo-simple-select-outlined\"\r\n                            value={interestValues.compoundInterval} name=\"compoundInterval\"\r\n                            label=\"Interval\" onChange={interestValueChanged}\r\n                        >\r\n                            <MenuItem value={1}>Monthly</MenuItem>\r\n                            <MenuItem value={3}>Quaterly</MenuItem>\r\n                            <MenuItem value={6}>HalfYearly</MenuItem>\r\n                            <MenuItem value={12}>Yearly</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                </Grid>) : (\"\")}\r\n            <Grid item xs={12}>\r\n                <TextField label=\"From Date\" type=\"date\" variant=\"outlined\" name=\"fromDate\" value={interestValues.fromDate} onChange={interestValueChanged} style={widthStyle} />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <TextField label=\"To Date\" type=\"date\" name=\"toDate\" variant=\"outlined\" value={interestValues.toDate} onChange={interestValueChanged} style={widthStyle} />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={calculateInterest} style={widthStyle}>Calculate</Button>\r\n            </Grid>\r\n            {\r\n                interestValues.calculatedInterest ? (<Grid item xs={12}>\r\n                    <Typography>\r\n                        Principle Amount : {interestValues.amount} <br />\r\n                        Interest Rate : {interestValues.interestRate} <br />\r\n                        Interest Type : {interestValues.interestType} <br />\r\n                        From date : {interestValues.fromDate} <br />\r\n                        To date : {interestValues.toDate} <br />\r\n                        Total Days : {interestValues.totalDays} <br />\r\n                        Interest Amount: {interestValues.calculatedInterest} <br />\r\n                        Total Amount : {interestValues.totalAmount}\r\n                    </Typography>\r\n                </Grid>) : (\"\")\r\n            }\r\n\r\n        </Grid>\r\n    )\r\n}\r\n","import InterestCalculator from './components/calculator/InterestCalculator'\n\nfunction App() {\n  return (\n    <InterestCalculator />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}